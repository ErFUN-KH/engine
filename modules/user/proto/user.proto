syntax = "proto3";

package user;

option go_package = "userpb";
option java_multiple_files = true;
option java_outer_classname = "UserProto";
option java_package = "com.user";

import "github.com/fzerorubigd/protobuf/extra/extra.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option (extra.schema_name_all) = "aaa";

enum UserStatus {
  USER_STATUS_INVALID = 0;
  USER_STATUS_REGISTERED = 1;
  USER_STATUS_ACTIVE = 2;
  USER_STATUS_BANNED = 3;
}

message User {
  option (extra.is_model) = true;
  option (extra.table_name) = "users";
  int64 id = 1 [(gogoproto.moretags) = "db:\"id\" "];
  string email = 2 [(gogoproto.moretags) = "db:\"email\" "];
  string password = 3 [(gogoproto.moretags) = "db:\"password\" "];
  UserStatus status = 4 [(gogoproto.moretags) = "db:\"status\" "];
  string token = 5 [(gogoproto.moretags) = "db:\"token\" "];
  google.protobuf.Timestamp created_at = 6 [(gogoproto.moretags) = "db:\"created_at\" "];
  google.protobuf.Timestamp updated_at = 7 [(gogoproto.moretags) = "db:\"updated_at\" "];
  google.protobuf.Timestamp last_login = 8 [(gogoproto.moretags) = "db:\"last_login\" "];
}

message UserResponse {
  int64 id = 1;
  string email = 2;
  UserStatus status = 3;
}

message LoginRequest {
  string email = 1 [(gogoproto.moretags) = "validate:\"email,required\" "];
  string password = 2 [(gogoproto.moretags) = "validate:\"gte=6,required\" "];
}

message LogoutRequest {}

message LogoutResponse {}

message RegisterRequest {
  string email = 1 [(gogoproto.moretags) = "validate:\"email,required\" "];
  string password = 2 [(gogoproto.moretags) = "validate:\"gte=6,required\" "];
}

service UserSystem {
  rpc Login(LoginRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/v1/user/login"
      body: "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      get: "/v1/user/logout"
    };
    option (extra.resource) = "sss";
  }

  rpc Register(RegisterRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/v1/user/register"
      body: "*"
    };
  }
}
