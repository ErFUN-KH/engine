// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/20170727210828_users.sql

package migrations


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPostgres20170727210828userssql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4b\x6f\xdb\x30\x10\x84\xcf\xe6\xaf\xd8\x43\x00\xd9\xa8\xe2\x34" +
	"\xe9\xe3\x92\x4b\x59\x49\xad\x8d\x2a\x72\xa2\x47\x00\x9f\x84\xb5\xb8\xb5\x37\xd6\x2b\x24\x55\xd5\xf9\xf5\x85\x9c" +
	"\xc6\x76\x81\x16\x48\x4f\xc4\xce\xce\x12\x98\x0f\x23\xce\xcf\xe1\x4d\xc5\x6b\x8d\x96\x20\x6b\x87\x31\xb9\x0b\x81" +
	"\x6b\x30\x54\x58\x6e\x6a\x70\xb2\xd6\x01\x36\x40\x3f\xa9\xe8\x2c\x29\xe8\x37\x54\x83\xdd\xb0\x81\xe7\xbb\xc1\xc4" +
	"\x06\xb0\x6d\x4b\x26\x25\x84\x17\x07\x32\x0d\x20\xf1\x66\xc1\x8d\x04\x44\xbc\x3e\x68\xa9\xfc\x1c\x06\x83\x34\xed" +
	"\x0c\x69\x33\x16\x23\x56\xb0\xe2\xb5\x21\xcd\x58\x42\xb4\x48\x21\xca\xc2\xd0\x15\x23\xaa\x90\x4b\xf8\x81\xba\xd8" +
	"\xa0\x3e\x5d\xb4\x68\x4c\xdf\x68\xf5\xb7\x9d\xb1\x68\x3b\x03\x5c\xdb\x83\x0a\x7e\xf0\x45\x66\x61\x0a\x97\xae\x18" +
	"\x15\x9a\xd0\x92\xca\xd1\x82\xe5\x8a\x8c\xc5\xaa\x85\x9e\xed\x66\x3f\xc2\x53\x53\xd3\xe9\x77\x5d\xab\xfe\xc7\x5e" +
	"\xa2\xb1\x79\xd9\xac\xb9\x7e\x95\xdd\x5b\x44\x49\x1a\xcb\x79\x94\x0e\x40\xf2\x3d\x90\x9c\x55\xde\x6a\xae\x50\xef" +
	"\xe0\x36\x9e\xdf\xc8\x78\x09\xdf\x82\x25\x8c\x59\x4d\xfe\x75\xb2\x27\x95\x77\x35\x3f\x76\x04\x59\x34\xbf\xcb\x02" +
	"\x18\xef\xc5\x89\x10\x93\x6b\x21\xe6\x51\x12\xc4\x29\xcc\xa3\x74\x71\x44\xff\xdb\xe2\xc2\x0b\x4f\x17\x9e\xe9\xb9" +
	"\x70\xa4\xe4\xc2\x11\x81\x0b\xc7\x7c\x13\xb8\x97\x61\x16\x24\x62\x34\x76\x2a\x34\x96\xf4\xa7\x82\x74\x57\x12\xd6" +
	"\x53\xd6\x8e\x0b\xce\xd9\x15\x9e\xbd\xfd\x78\xf6\xe0\xcb\xdd\x87\xcb\xf7\x09\x55\x5f\x7b\x6f\xb6\xf1\xa7\xd3\xed" +
	"\x77\x45\xaa\xbf\xe0\x95\xf7\xee\x69\xf7\x30\xdd\x3e\xde\x5a\x6f\xb6\x68\x64\x7f\xbf\x9c\x79\x17\x71\xe9\x87\xe8" +
	"\xb8\x70\xe5\x82\x53\x37\xbd\xf3\xe7\x33\x84\x39\xad\xab\xdf\xf4\xf5\x4b\x61\x0f\x6d\x1d\xc4\x57\xf5\x55\x37\x65" +
	"\x49\x0a\x56\x58\x6c\x85\xf0\xe3\xc5\xed\x49\x63\xc1\x93\x89\x27\xfd\x00\xae\x7f\x05\x00\x00\xff\xff\x91\xd2\xa6" +
	"\x42\x20\x03\x00\x00"

func bindataPostgres20170727210828userssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20170727210828userssql,
		"postgres/20170727210828_users.sql",
	)
}



func bindataPostgres20170727210828userssql() (*asset, error) {
	bytes, err := bindataPostgres20170727210828userssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "postgres/20170727210828_users.sql",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"postgres/20170727210828_users.sql": bindataPostgres20170727210828userssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"postgres": {Func: nil, Children: map[string]*bintree{
		"20170727210828_users.sql": {Func: bindataPostgres20170727210828userssql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
