// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/20170727210828_users.sql

package migrations


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPostgres20170727210828userssql = "" +
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\x6f\xda\x4c\x14\x85\xd7\xcc\xaf\xb8\x8b\x48\x06\xbd\x0e\x09" +
	"\xe6\xe3\x6d\xc4\xa6\xae\xed\x16\x54\xc7\x10\x7f\x44\x62\x65\x0d\x9e\x0b\x4c\xb0\xc7\xce\xcc\xb8\x2e\xf9\xf5\x95" +
	"\x49\x03\xa8\x4a\xa5\x74\x65\xdd\x73\xcf\x91\x75\x9f\x39\xe4\xfa\x1a\xfe\x2b\xf8\x56\x52\x8d\x90\x54\xed\x18\x3d" +
	"\xf8\xc0\x05\x28\xcc\x34\x2f\x05\x18\x49\x65\x00\x57\x80\x3f\x31\xab\x35\x32\x68\x76\x28\x40\xef\xb8\x82\xd7\x5c" +
	"\x6b\xe2\x0a\x68\x55\xe5\x1c\x19\x21\x4e\xe8\xd9\xb1\x07\x91\x33\xf3\xee\x6d\xa0\x94\x4e\x4f\x5a\x6c\x7f\xf1\xbd" +
	"\x56\xea\xd7\x0a\xa5\xea\x92\x0e\x67\xb0\xe6\x5b\x85\x92\xd3\x1c\x82\x45\x0c\x41\xe2\xfb\x26\xe9\x60\x41\x79\x0e" +
	"\x3f\xa8\xcc\x76\x54\x5e\x2e\x2a\xaa\x54\x53\x4a\xf6\xde\x4e\x69\xaa\x6b\x05\x5c\xe8\x93\x0a\xae\xf7\xd5\x4e\xfc" +
	"\x18\x06\x26\xe9\xe8\x72\x8f\xe2\xbd\x60\x26\x91\x6a\x64\x29\xd5\xa0\x79\x81\x4a\xd3\xa2\x82\x86\xeb\xdd\x71\x84" +
	"\x97\x52\xe0\xa5\xbd\xae\xd8\xbf\xd8\x73\xaa\x74\x9a\x97\x5b\x2e\x3e\x64\x77\x16\x41\x14\x87\xf6\x3c\x88\x5b\x52" +
	"\xe9\x91\x54\xca\x59\x5a\x49\x5e\x50\x79\x80\x65\x38\xbf\xb7\xc3\x15\x7c\xf7\x56\xd0\xe5\xac\xf7\xb7\xc8\x11\x61" +
	"\x5a\x0b\xfe\x5c\x23\x24\xc1\xfc\x21\xf1\xa0\x7b\x14\x7b\x84\xf4\xa6\x84\xcc\x83\xc8\x0b\x63\x98\x07\xf1\xe2\xfc" +
	"\x26\xbf\x2d\x26\xbc\x81\x36\xe1\x15\xab\x09\x47\x7c\x26\x9c\x61\x99\x70\x26\x61\xc2\xf9\xcc\x1e\x3c\xda\x7e\xe2" +
	"\x45\xa4\xd3\x35\x0a\xaa\x34\xca\xcf\x19\xca\x3a\x47\x2a\xfa\x5c\x1a\x26\x18\x57\x16\xbd\xba\x9d\x5c\x3d\xb9\xf6" +
	"\x61\x3c\x18\x45\x58\x7c\x6b\x9c\xd9\xce\xed\xf7\xf7\x1b\x86\xac\xb9\xe1\x6b\x67\xf8\x72\x78\xea\xef\x9f\x97\xda" +
	"\x99\x2d\x4a\xbb\x79\x5c\xcd\x9c\x9b\x30\x77\x7d\x6a\x98\x60\x99\x60\x8c\xd9\x64\x68\xa1\xb5\xce\xc6\x43\x86\x9f" +
	"\xac\xf1\xc6\x1a\xfd\x3f\x9a\xdc\xad\x07\x23\x6b\x33\x19\x6e\x36\xb7\x59\x36\x18\xde\xdd\x61\xfb\x3b\x51\x36\x7f" +
	"\x7c\xda\xfb\x2f\xab\xef\x96\x8d\x78\x2b\xff\xa9\xf9\xad\xf8\xa1\xee\xcb\x32\xcf\x91\xc1\x9a\x66\x7b\x42\xdc\x70" +
	"\xb1\xbc\x68\x3f\x38\x76\xe4\xd8\xae\x07\xd3\x5f\x01\x00\x00\xff\xff\x46\x22\xc9\x35\x6c\x03\x00\x00"

func bindataPostgres20170727210828userssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataPostgres20170727210828userssql,
		"postgres/20170727210828_users.sql",
	)
}



func bindataPostgres20170727210828userssql() (*asset, error) {
	bytes, err := bindataPostgres20170727210828userssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "postgres/20170727210828_users.sql",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"postgres/20170727210828_users.sql": bindataPostgres20170727210828userssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"postgres": {Func: nil, Children: map[string]*bintree{
		"20170727210828_users.sql": {Func: bindataPostgres20170727210828userssql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
